# -*- coding: utf-8 -*-
"""kNNClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OyAz0x8w8vYsm5s2mpYA5ejoGbgrmB-v
"""

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix

# Step 1: Load and Normalize the Dataset
# Load the dataset
file_path = '/content/drive/MyDrive/Colab Notebooks/csv files/wdbc.data.mb.csv'
data = pd.read_csv(file_path, header=None)

# Separate features and labels
X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

# Normalize the feature data
X_normalized = (X - X.mean(axis=0)) / X.std(axis=0)

# Step 2: Split the dataset into training (70%) and testing (30%) sets
X_train, X_test, y_train, y_test = train_test_split(X_normalized, y, test_size=0.3, random_state=42)

#Implement the distance calculation and class assignment functions for kNN:
def euclidean_distance(x1, x2):
    return np.sqrt(np.sum((x1 - x2) ** 2))

def kNN_predict(X_train, y_train, x_test, k):
    distances = []
    for i in range(len(X_train)):
        dist = euclidean_distance(x_test, X_train[i])
        distances.append((y_train[i], dist))

    # Sort by distance and get the k nearest neighbors
    distances.sort(key=lambda x: x[1])
    neighbors = [x[0] for x in distances[:k]]

    # Count the class occurrences in the neighbors
    counts = np.bincount(neighbors)

    # Return the class with the highest count
    return np.argmax(counts)

# Replace -1 with 0 in the class labels
y_train = np.where(y_train == -1, 0, y_train)
y_test = np.where(y_test == -1, 0, y_test)

# Test kNN classifier for different values of k (e.g., 1, 3, 5, 7, 9):
k_values = [1, 3, 5, 7, 9]

for k in k_values:
    y_pred = [kNN_predict(X_train, y_train, x_test, k) for x_test in X_test]
    accuracy = accuracy_score(y_test, y_pred)
    confusion = confusion_matrix(y_test, y_pred)

    print(f"Results for k = {k}:")
    print(f"Accuracy: {accuracy}")
    print("Confusion Matrix:")
    print(confusion)
    print("="*30)